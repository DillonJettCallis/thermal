import self/array::Array;
import self/bool::Boolean;
import self/math::Int;
import self/base::Unit;

public data Vec<Item> {
  size: Int,
}

implement <Item> Vec<Item> {
  external public fun empty(): Vec<Item>;
  external public fun from(arr: Array<Item>): Vec<Item>;
  external public fun toArray(): Array<Item>;
  external public fun first(self): Item;
  external public fun last(self): Item;
  external public fun get(self, index: Int): Item;
  external public fun push(self, item: Item): Vec<Item>;
  external public fun pop(self): Vec<Item>;
  external public fun set(self, index: Int, item: Item): Vec<Item>;
  external public fun concat(self, other: Vec<Item>): Vec<Item>;
  external public fun map<Out>(self, mapper: fun { Item -> Out }): Vec<Out>;
  external public fun flatMap<Out>(self, mapper: fun { Item -> Vec<Out> }): Vec<Out>;
  external public fun filter(self, mapper: fun { Item -> Boolean }): Vec<Item>;
  external public sig forEach(self, action: sig { Item -> Unit }): Unit;
  external public fun fold<Out>(self, init: Out, mapper: fun { Out, Item -> Out }): Out;
}

