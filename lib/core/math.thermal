import self/string::String;


public protocol AddOp<Out> {
  public fun addOp(self, other: Self): Out;
}

public protocol SubOp<Out> {
  public fun subtractOp(self, other: Self): Out;
}

public protocol MulOp<Out> {
  public fun multiplyOp(self, other: Self): Out;
}

public protocol DivOp<Out> {
  public fun divideOp(self, other: Self): Out;
}

public protocol NegateOp {
  public fun negateOp(self): Self;
}

// Int
public data Int {}

implement Int {
  external public fun toString(self): String;
}

implement AddOp<Int> for Int {
  external public fun addOp(self, other: Self): Int;
}

implement SubOp<Int> for Int {
  external public fun subtractOp(self, other: Self): Int;
}

implement MulOp<Int> for Int {
  external public fun multiplyOp(self, other: Self): Int;
}

implement DivOp<Int> for Int {
  external public fun divideOp(self, other: Self): Int;
}

implement NegateOp for Int {
  external public fun negateOp(self): Int;
}

implement Equal for Int {
  external public fun equal(self, other: Self): Boolean;
  external public fun notEqual(self, other: Self): Boolean;
}

implement Ordered for Int {
  public fun compare(self, other: Self): Ordering {
    return doCompare(compareInt(self, other));
  }

  public fun greaterThan(self, other: Self): Boolean {
    return compareInt(self, other) == 1;
  }
  public fun greaterThanOrEqualTo(self, other: Self): Boolean {
    return compareInt(self, other) != -1;
  }

  public fun lessThan(self, other: Self): Boolean {
    return compareInt(self, other) == -1;
  }
  public fun lessThanOrEqualTo(self, other: Self): Boolean {
    return compareInt(self, other) != 1;
  }
}

external fun compareInt(left: Int, right: Int): Int;

// Float
public data Float {}

implement Float {
  external public fun toString(self): String;
}

implement AddOp<Float> for Float {
  external public fun addOp(self, other: Self): Float;
}

implement SubOp<Float> for Float {
  external public fun subtractOp(self, other: Self): Float;
}

implement MulOp<Float> for Float {
  external public fun multiplyOp(self, other: Self): Float;
}

implement DivOp<Float> for Float {
  external public fun divideOp(self, other: Self): Float;
}

implement NegateOp for Float {
  external public fun negateOp(self): Float;
}

implement Equal for Float {
  external public fun equal(self, other: Self): Boolean;
  external public fun notEqual(self, other: Self): Boolean;
}

implement Ordered for Float {
  public fun compare(self, other: Self): Ordering {
    return doCompare(compareFloat(self, other));
  }

  public fun greaterThan(self, other: Self): Boolean {
    return compareFloat(self, other) == 1;
  }
  public fun greaterThanOrEqualTo(self, other: Self): Boolean {
    return compareFloat(self, other) != -1;
  }

  public fun lessThan(self, other: Self): Boolean {
    return compareFloat(self, other) == -1;
  }
  public fun lessThanOrEqualTo(self, other: Self): Boolean {
    return compareFloat(self, other) != 1;
  }
}

external fun compareFloat(left: Float, right: Float): Int;

fun doCompare(comp: Int): Ordering {
  if (comp == 0) {
    return Ordering::EqualTo
  } else {
    if (comp == 1) {
      return Ordering::GreaterThan
    } else {
      return Ordering::LessThan
    }
  }
}
